{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","ncols","chanceLigthStartsOn","Array","fill","map","Math","random","_this2","_this$props","nrows","createRow","_this$props2","_coord$split$map","split","Number","_coord$split$map2","slicedToArray","y","x","flipCell","reduce","accum","row","cell","setState","_this3","_this$state","tBodyBoard","key","concat","src_Cell_0","Fragment","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f425254.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(evt) {\n\t\t// call up to the board to flip cells around this cell\n\t\tthis.props.flipCellsAroundMe(this.props.coord);\n\t}\n\n\trender() {\n\t\tlet classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n\t\treturn <td className={classes} onClick={this.handleClick} />;\n\t}\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLigthStartsOn: 1\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard()\n\t\t};\n\n\t\tthis.flipCellsAround = this.flipCellsAround.bind(this);\n\t}\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\tcreateRow(ncols, chanceLigthStartsOn) {\n\t\tlet row = new Array(ncols).fill(null).map(() => Math.random() <= chanceLigthStartsOn);\n\t\treturn row;\n\t}\n\n\tcreateBoard() {\n\t\tconst { nrows, ncols, chanceLigthStartsOn } = this.props;\n\t\tlet board = new Array(nrows)\n\t\t\t.fill(null)\n\t\t\t.map(() => this.createRow(ncols, chanceLigthStartsOn));\n\t\treturn board;\n\t}\n\n\t/** handle changing a cell: update board & determine if winner */\n\n\tflipCellsAround(coord) {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [ y, x ] = coord.split('-').map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\n\t\t//Flip this cell and the cells around it\n\t\tflipCell(y, x); // Flip initial cell\n\t\tflipCell(y - 1, x); // Flip above cell\n\t\tflipCell(y + 1, x); // Flip below cell\n\t\tflipCell(y, x - 1); // Flip left cell\n\t\tflipCell(y, x + 1); // Flip right cell\n\n\t\t// const [ up, down, left, right ] = [ y - 1, y + 1, x - 1, x + 1 ];\n\n\t\t// up >= 0 && up < nrows && (board[up][x] = !board[up][x]);\n\t\t// down >= 0 && down < nrows && (board[down][x] = !board[down][x]);\n\t\t// left >= 0 && left < ncols && (board[y][left] = !board[y][left]);\n\t\t// right >= 0 && right < ncols && (board[y][right] = !board[y][right]);\n\n\t\t// win when every cell is turned off\n\t\tlet hasWon = board.reduce(\n\t\t\t(accum, row) => accum && row.reduce((accum, cell) => accum && !cell, true),\n\t\t\ttrue\n\t\t);\n\n\t\tthis.setState({ board, hasWon });\n\t}\n\n\t/** Render game board or winning message. */\n\n\trender() {\n\t\t// if the game is won, just show a winning msg & render nothing else\n\t\tconst { board, hasWon } = this.state;\n\t\tlet tBodyBoard = board.map((row, y) => {\n\t\t\treturn (\n\t\t\t\t<tr key={`row-${y}`}>\n\t\t\t\t\t{row.map((isLit, x) => (\n\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\tkey={`${y}-${x}`}\n\t\t\t\t\t\t\tisLit={isLit}\n\t\t\t\t\t\t\tcoord={`${y}-${x}`}\n\t\t\t\t\t\t\tflipCellsAroundMe={this.flipCellsAround}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</tr>\n\t\t\t);\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"Game\">\n\t\t\t\t{hasWon ? (\n\t\t\t\t\t<div className=\"win\">\n\t\t\t\t\t\t<span className=\"neon-orange\">You</span>\n\t\t\t\t\t\t<span className=\"neon-blue\">Win!</span>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t<div className=\"neon-orange\">Lights</div>\n\t\t\t\t\t\t\t<div className=\"neon-blue\">Out</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<table className=\"Board\">\n\t\t\t\t\t\t\t<tbody>{tBodyBoard}</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}